<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog of Eddix]]></title>
  <link href="http://eddix.github.com/atom.xml" rel="self"/>
  <link href="http://eddix.github.com/"/>
  <updated>2012-12-17T19:05:21+08:00</updated>
  <id>http://eddix.github.com/</id>
  <author>
    <name><![CDATA[eddix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[未设置POSTFIELDS参数导致libcurl程序出现CLOSE_WAIT]]></title>
    <link href="http://eddix.github.com/blog/2012/12/17/missing-postfields-in-libcurl-cause-close-wait/"/>
    <updated>2012-12-17T18:22:00+08:00</updated>
    <id>http://eddix.github.com/blog/2012/12/17/missing-postfields-in-libcurl-cause-close-wait</id>
    <content type="html"><![CDATA[<p>用libcurl写一个网络程序，在一个POST请求中老是出现CLOSE_WAIT情况，今天终于得空来解决这个问题。</p>

<p>最初的源代码如下：</p>

<figure class='code'><figcaption><span> (curlpost.c)</span> <a href='http://eddix.github.com/downloads/code/curlpost.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;curl/curl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CURLcode</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CURL</span> <span class="o">*</span> <span class="n">curl_handle</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">oauth_header_string</span><span class="p">[</span><span class="n">BUFSIZ</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">curl_slist</span> <span class="o">*</span> <span class="n">headers</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// handle initialize, error handling is missing for example.</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">curl_global_init</span><span class="p">(</span><span class="n">CURL_GLOBAL_DEFAULT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_handle</span> <span class="o">=</span> <span class="n">curl_easy_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="s">&quot;https://example.com/post&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_POST</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">oauth_header_string</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcat</span><span class="p">(</span><span class="n">oauth_header_string</span><span class="p">,</span> <span class="s">&quot;Authorization: OAuth &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">strcat</span><span class="p">(</span><span class="n">oauth_header_string</span><span class="p">,</span> <span class="s">&quot;oauth_version=</span><span class="se">\&quot;</span><span class="s">1.0</span><span class="se">\&quot;</span><span class="s">, &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ... oauth header code ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">oauth_header_string</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="n">headers</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">curl_easy_perform</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">curl_easy_cleanup</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_global_cleanup</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为服务端要求此请求必须用POST协议，但这次请求没有数据需要POST，所以只设置了POST方法。</p>

<p>首先发现出错是在请求头多了一个<code>Expect: 100-continue</code>，看看文档，如果是HTTP 1.1的协议，curl会自动加上这个头，加上一行代码干掉：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&quot;Expect: &quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来倒是不出错了，因为请求一直hang住了。<code>netstat -ano</code>一看，端口处于<code>CLOSE_WAIT</code>状态。</p>

<!--more-->


<p>先google了一把，发现很多人提到需要设置CURLOPT_FORBID_REUSE。好吧，加上试试：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_FORBID_REUSE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>没用。</p>

<p>只好从<code>CLOSE_WAIT</code>状态出发，网上有很多讲<code>CLOSE_WAIT</code>状态的，看了一些，半懂不懂的，大意就是说server端已经close了，但client端可能还因为需要忙于读写，没有主动关闭。</p>

<p>检查了一下，觉得最可疑的就是设置了<code>CURLOPT_POST</code>参数，但没有设置<code>CURLOPT_POSTFIELDS</code>，也没有设置<code>CURLOPT_READFUNCTION</code>等，可能curl不知道应该从哪里读数据，还在等呢。</p>

<p>加上下面两行，就一切正常了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_handle</span><span class="p">,</span> <span class="n">CURLOPT_POSTFIELDSIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>难怪libcurl团队的营利模式是如果你用libcurl出了问题又一直搞不定，就付咨询费给他们让他们解答。他们在文档中轻描淡写地说一句：</p>

<blockquote><p>Use one of CURLOPT_POSTFIELDS or CURLOPT_COPYPOSTFIELDS options to specify what data to post and CURLOPT_POSTFIELDSIZE or CURLOPT_POSTFIELDSIZE_LARGE to set the data size.</p><footer><strong>CURL Team</strong> <cite><a href='http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPOST'>CURLOPT_POST</a></cite></footer></blockquote>


<p>我就想我不post数据，两个都不需要设置吧？结果一漏掉程序就hang住了，如果想照着example写，就死翘了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于REST方法的产品设计]]></title>
    <link href="http://eddix.github.com/blog/2012/12/15/restful-product/"/>
    <updated>2012-12-15T00:09:00+08:00</updated>
    <id>http://eddix.github.com/blog/2012/12/15/restful-product</id>
    <content type="html"><![CDATA[<p>在我不长不短的产品开发生涯中，我接触到的苦逼的程序员最怕碰到的是不靠谱的产品设计。很多初出道的产品设计由于没有真正接触过开发，也无法理解开发到底是在做什么，经常会画蛇添足地增加不必要的功能，同时却没有把核心功能的方方面面都覆盖到位。</p>

<p>他们最常说的两句话是：</p>

<ul>
<li>“就加一个输入框和一个按钮，这开发成本很大吗？”</li>
<li>“啊？这里还有一个页面要设计啊？”</li>
</ul>


<p>不可能让程序员都转行去做产品。产品需要灵感、想像力，以及品位，而开发需要严谨、周密，以及抽象。</p>

<p>但是一个设计完备，结构精巧的产品，需要两者兼备。</p>

<p>在服装设计行业，设计师不会仅仅在纸上画画图，还会真实地去挑选面料并自己裁剪。而程序设计则远没这么容易，程序开发是人类极为少见的以工程的方式生产出抽象的成果的活动——软件无质无形，其成果都在每个人自己的想象之中。在产品设计阶段如何判断到底有多少东西要做变得困难，要不这世界上也不会有那么多失败的软件项目了。</p>

<p>我有幸做过一段时间产品设计，加上自己业余时间也独立开发过一些项目，发现一个比较有效的方法，分享于此。主要给一些产品设计新手作为参考。</p>

<h2>REST</h2>

<p>人类发明了计算机，并用二进制的方式将命令发给处理器。先驱和先烈们发现处理器命令都是类似<code>10011100</code>这样的东西，没法记，就发明了汇编。汇编之后产生了程序设计语言和对应的编译器，再后来，人们发现命令式的编程语言仍然难以驾驭现实问题的复杂性，又发明了面向对象的编程语言。无论你认为函数式编程会比面向对象高级几条街，不可否认的是，在大量的项目中，面向对象仍然是首选的编程方式。</p>

<p>面向对象的程序设计大致来说就是将程序中各种角色抽象成一种包含属性和方法的对象。比如一个记账的软件里面，就有金钱这个对象，它至少有数量和单位两个属性，还有支出和收入两种方法。当然还有大量程序内用户难以观察到的对象，如日志（loggin）对象，则至少有日志文件地址这个属性，和打印日志这个方法。</p>

<p>REST则是在更上层，从业务层面来约定设计概念以及准则的思路。为了简化其概念，我在此主要抽出与产品设计相关的一个子集，大概可以这样描述：</p>

<p><strong>网络上所有事物都被抽象为资源，他们通过通用的接口来与彼此及用户交互。</strong></p>

<p>前半句话比较容易理解：比如一个Blog系统，则至少有文章（Artical）和评论（Comment）两种资源；一个电子商务系统，至少有商品（Commodity）、购物车（Cart）、订单（Order）和顾客（Customer）四种资源。</p>

<p>后半句话怎么理解呢？</p>

<h2>CURD</h2>

<p>CURD是针对一个资源最基本的四种操作：创建（Create），更新（Update），读取（Read）和删除（Destroy）。在实际的应用中，因为用户的参与，还需要在增加三个操作：新建（New），编辑（Edit）和索引（Index）。这七个操作，也就是Rails在引入REST资源概念之后所默认的七种方法。</p>

<p>基本上在产品设计的时候，拿着这七种方法去检查功能的设计，不能保证你能设计出完美的产品（那是你的命运应该负责的事），但至少不会设计出功能缺失的产品。也就是说你那两句常说的话可以少说很多次了。</p>

<p>来看例子。</p>

<h2>简单应用</h2>

<p>我们把七种方法稍加整理，变成五部分：</p>

<ul>
<li>index</li>
<li>show(read)</li>
<li>new &amp; create</li>
<li>edit &amp; update</li>
<li>destroy</li>
</ul>


<p>以Blog中的Artical为例。</p>

<p><code>index</code>的意思是索引，也就是如何展示资源的集合。在这里，就是如何展示多篇文章。这就是Blog的列表页，无论你是否要翻页，一页显示5条还是10条，你总不能把这个页面给省掉吧。</p>

<p><code>show</code>的意思是如何展示单个资源，在大多数blog系统中就是单篇文章的页面。</p>

<p><code>new</code>和<code>create</code>描述如何创建一个新的资源，也就是如何创建一篇新的文章。但这其实包含两部分：填写新文章的输入页面，和提交新文章时的反馈。前一部分就是新文章的表单页，而后一部分则需要设计：是给一个成功提示页，还是直接跳转到新文章的展示页（<code>show</code>），又或者是跳到集合页（<code>index</code>）。</p>

<p><code>edit</code>和<code>update</code>同样，前者是修改文章的编辑页，后者是提交修改后的反馈：成功提示页、跳到文章展示页，又或者是跳到集合页。</p>

<p><code>destory</code>很简单，提交删除之后，如何返回：提示删除成功，或者跳到集合页（嗯，这时候被删的那条已经不见了）。</p>

<p>以上就是一个Artical所必须的七个页面，当然可以在真实的设计中将其中某些页面做成多次显示，比如Blog系统前台需要显示集合页，后台管理系统中同样会显示文章集合。但是你不能省掉其中某个方法，不然功能就残了。</p>

<p>对于Artical资源，这七种方法当然缺一不可。幸运的是，我在前面说过，这七种方法是用来检查有无缺失的，并不表示对于每种资源都需要完备的七个页面才行。比如对于Comment资源，评论都显示在文章下方，所以只有<code>index</code>页，没有针对单条评论的<code>show</code>页，同时修改和更新也不需要，所以<code>edit</code>和<code>update</code>也不用设计。就剩下<code>index</code>，<code>new</code>，<code>create</code>和<code>destory</code>四种方法需要设计——你已经审视过并确认另外三个可以没有了，不用担心自己是否漏掉什么重要的东西了。</p>

<h2>抽象应用</h2>

<p>如果你已经熟练应用这个方法了，那么可以开始训练自己用这种方法审视抽象资源了。</p>

<p>比如，用户注册(<code>new</code>)，修改资源（<code>edit</code>）甚至注销账号（<code>destory</code>）都可以用上面的方法来检查，但是，用户登陆（<code>login</code>）和登出（<code>logout</code>）呢？</p>

<p>这里需要一些抽象思维。在大多数产品的实现中，用户在线状态实际上是由一种叫<code>session</code>的东西来保存的。你可以理解为某种不可见的东西，用户带在身上，就表示登陆了，不在身上了，就登出了。</p>

<p>那么针对<code>session</code>这种抽象资源，如何应用REST规则呢？很简单。</p>

<p>首先，我们也许不需要看到有哪些用户在线，因此，针对<code>session</code>的<code>index</code>页可以不用考虑。</p>

<p>新建<code>session</code>资源的页面在哪儿呢？也许你已经想到了，那就是登陆页。实际上<code>session</code>的新建（<code>new</code>）就是用户输入用户名和密码那个页面，提交之后如果成功，那么就成功创建（<code>create</code>）了一个<code>session</code>资源。因此登陆后的页面就是<code>session</code>的<code>show</code>页面了——我们展示已登陆的用户的账号信息，其实质就是展示他身上带的<code>session</code>。</p>

<p>大多数情况下用户不会修改自己的登陆状态——再说，又能改成啥呢？因此，你可以放心地把<code>edit</code>和<code>update</code>扔掉，最后，只剩下删除（<code>destroy</code>）<code>session</code>的页面了，这就是<code>logout</code>。</p>

<h2>总结</h2>

<p>记下这七个方法：<code>index</code>，<code>show</code>，<code>new</code>，<code>create</code>，<code>edit</code>，<code>update</code>，<code>destory</code>。没事玩别人产品的时候多思考一下那些让你赞叹的产品是如何实现这七个方法的，以及哪些让你抓狂的产品是缺失了哪个方法导致你玩不顺畅的。你应该很快能够成长到避免一些初级错误的阶段。</p>

<h2>例外</h2>

<p>所有模式都是错的，但有些可以用。</p>

<p>如果你是在设计一个非常抽象也非常技术化的服务，比如设计一个OAuth服务的时候，要想明白其中的REST资源就比较困难，拿<code>secret_key</code>让用户去<code>authorizen</code>页授权再由后台去获取<code>access_token</code>，嗯，这超出大多数产品设计师的能力范围了，这也不奇怪，OAuth这样的“产品”本身就是由工程师设计出来的。这种情况下，你做好你能想像到的资源的设计，并相信你的技术团队能帮你搞定你想不出来的那部分就行了。</p>

<p>另外我相信牛逼的产品设计师不需要拿这七条去挨个校对，这世上就是那样一些人，他们丰富的经验和教训已经教会他们如何如何设计完整的产品流程并形成功能闭环，在说到删除<code>destroy</code>功能的时候他们还补充说到：不能真删除，做一个标记位把它标记为删除就行了，数据还要保存在我们数据库中，郭嘉要求要保留至少三个月以备查案底呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建博客]]></title>
    <link href="http://eddix.github.com/blog/2012/07/02/simple-octopress-note/"/>
    <updated>2012-07-02T17:23:00+08:00</updated>
    <id>http://eddix.github.com/blog/2012/07/02/simple-octopress-note</id>
    <content type="html"><![CDATA[<h2>安装Octopress</h2>

<p>去<a href="https://github.com/imathis/octopress">github</a>上clone一份出来即可。</p>

<pre><code>git clone https://github.com/imathis/octopress
</code></pre>

<p>修改<code>.rvmrc</code>为自己的环境配置。</p>

<pre><code>rvm use 1.9.3@octopress
bundle update
</code></pre>

<h2>配置Octopress</h2>

<p>修改<code>_config.yml</code>，里面有各种url，标题，副标题等配置。</p>

<!--more-->


<h2>开始写一篇新博客</h2>

<p>新增一篇博客</p>

<pre><code>rake new_post['post title']
</code></pre>

<p>编辑<code>source/_posts</code>下新生成的markdown文件。</p>

<p>生成静态站点</p>

<pre><code>rake generate
</code></pre>

<h2>发布到heroku</h2>

<pre><code>git add .
git commit -m 'add post post title'

git remote add heroku git@heroku.com:app.git
git push -u heroku master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新域名和新Blog]]></title>
    <link href="http://eddix.github.com/blog/2012/03/15/first-blog-from-octpress/"/>
    <updated>2012-03-15T02:08:00+08:00</updated>
    <id>http://eddix.github.com/blog/2012/03/15/first-blog-from-octpress</id>
    <content type="html"><![CDATA[<p>买了<a href="http://eddix.me/">eddix.me</a>这个域名，搭好了新的博客系统。接下来就找个时间把以前的blog全搬过来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[祖国的陌生人]]></title>
    <link href="http://eddix.github.com/blog/2010/11/13/stranger-of-mainland/"/>
    <updated>2010-11-13T02:23:00+08:00</updated>
    <id>http://eddix.github.com/blog/2010/11/13/stranger-of-mainland</id>
    <content type="html"><![CDATA[<p>是旅行引发旅行。2007年的夏天，作为对“不了解中国国情”的批评的回应和自省，32岁的许知远从黑龙江的爱辉出发，开始了为期四十天的旅行。就像他难以避免在写作时使用翻译体一样，书本的熏陶使他选择了云南的腾冲作为终点，这样他的路线就因或多或少地沿着胡焕庸线而显得有了某种意义。</p>

<p>我是在世界杯小组赛中巴西对战葡萄牙的那一场比赛的晚上在单向街书店买到他的这本旅行札记。在朝阳公园蓝色港湾的夜景里，单向街书店在仿造欧州风格的商业巷中显得温暖而静谧。繁华的商场与静静流淌的亮马河的双重包围，使得书店同时带上了镀金时代与文艺复兴的双重色彩。我已经忘了在酒吧里看比赛的情景，却记得那些意味深长的细节。那是一个奇特的夜晚，权贵们的后代开着名贵跑车带着性感漂亮的姑娘在这昂贵的国际商区中共度良宵，同时正在比赛的朝鲜队在主体思想的领导下仍然让科勒迪瓦踹进了三个球输掉了比赛，有关他们回国之后是否会去挖媒的讨论充斥在第二天的各个聊天群中，而书店的售货员正低声地回答我为何许知远的很多活动都与这家书店有关：他是这家书店的股东。</p>

<p>没有什么比旅行更能安慰一个深陷无休止的加班、争吵与彷徨的人了，哪怕它只是暂时的。更何况我也面临同样的境地：我在我的祖国，我却只是一个陌生人。因此当叶师傅问我十一的时候是否去青海湖骑行的时候，我稍作犹豫之后便答应了，并从我拥有不太好看的帐单的信用卡里支付了来回的火车票和机票费。</p>

<p>是的，我该出去走走了，否则我会以为世界就是这么大了。</p>

<!--more-->


<p>“兰州是一个不太适合旅行的城市。”当旅行快结束时，我们在青年旅舍中认识的许先生以经验丰富的旅行者的身份批评我们的行程安排。</p>

<p>然而作为旅行的第一站，兰州并未给我留下太乏味的感觉。这个地形狭长的城市沿着黄河而建，城市的主要街道则以甘肃省的其它城市命名，如张掖路、庆阳路。在张掖路上，看到一家名叫“西单商城”的购物中心，它的外形与北京的西单商城如出一辄。与中国很多二线城市一样，兰州也是跟随着北京、上海等一线城市的路线，规划出王府井商业街、本地特色小吃一条街、酒吧、KTV和电玩城，努力将自己装扮得像是一个国际化大都市。黄河边上安排了各种娱乐设施，以便让游人体验在黄河里划船的感觉，河岸上巨型的长龙模型粗糙而轻浮。市中心同样有一个宽阔的人民广场，广场对面安放着一面巨大的屏幕，在晚上七点准时播放让人自信心爆棚的新闻联播。只有不断迎面而来的一个个号称最正宗的兰州清真拉面馆在提醒我这是一个典型的西北城市。我们在张掖路的一家看上去最大的兰州拉面馆吃了早饭，辛辣的羊肉汤让经过一夜火车的我浑身舒展开了。我们买了晚上去西宁的火车票，以便与上海过来的同行汇合。</p>

<p>是上次去青岛的卧铺让我减轻了由于大一时坐硬座去西昌的痛苦经历带来的对火车的厌烦，从北京去兰州的卧铺让我加强了这种认同，而接下来再去西宁的硬座又将这种厌烦带了回来。硬座车厢里的空气浑浊沉闷，不断来来往往的列车工作人员在不停地向我们推销各种粗劣过时的三维照片，有乘客拿着座票找到自己的座位后却发现那个座位上已经坐着一个只买了站票的人，后者在前者叫来检票人员帮忙讨回自己的权利时仗着自己强壮的体格和少数民族的身份假装听不懂他们的要求，等到对方没辄了便安心地继续赖在座位上。</p>

<p>到达西宁的时候已是夜晚，寒冷的空气让我们一下子无所适从。于是我们在两路人马汇合之后便立刻打车去向预订的青年旅舍。</p>

<p>从西海镇开始骑车时已是下午两点，久负盛名的青海老酸奶送我们上路。高原上阳光强烈，公路忽上忽下，左右巍峨的山脉下不时有羊群出现。由于是10月2日，骑行的人很多，不时有人经过我们的队伍并向我们高喊加油以示友好。这时我们已经有人出现明显的高原反应，加上连续而漫长的上坡，我们行进得很慢。一个小时以后，我终于突破了之前的体能极限，开始适应这个运动。</p>

<p>由于沙漠化日益严重，为避免公路被沙尘覆盖，在某些靠近沙山的道路两旁，我看到了传说中的固沙田。这是一种非常聪明的方法，人们把一种适宜生长的草的种子揉在麻绳里，然后把麻绳半埋进沙里，纵横交错，形成一个个一米见方的小格子，看上去像是一张张围棋棋盘。由于表面的沙子被麻绳格子格开，大面积的沙无法聚在一起形成流沙。等到种子发芽长出草时，沙地就暂时被固定了下来。</p>

<p>我们没能完成第一天的目标到达二朗剑，于是在天黑之前赶紧在湖边种羊场找了一户人家住下。会说藏语的汉族阿妈煮了一大锅的羊肉面给快被冻僵的我们，并告诉我们她晚上会每隔三个小时过来巡逻一圈以确保我们没出事。她又给我她的手机号，告诉我如果晚上有人出现比较严重的高原反应，就赶紧给她打电话。上一次就有人因为晚上突发高原反应，幸亏她及时送那人到医院救了他一命。我们之前出现了高原反应的同学立刻服下了一粒红景天，以保证能安稳地度过在这海拔三千米的高原上过的第一个夜晚。</p>

<p>夜晚的小村漆黑安静，如同我童年时在农村度过的那些夜晚。久违的星空让我们感叹不已，满天的繁星中能看到清晰的银河，那种感觉，像是回到了多年以前。</p>

<p>我那厚厚的睡袋让我舒服地安睡了一整夜。而叶师傅却睡得并不好，他那薄了许多的睡袋则让他陷入了尴尬：在睡袋上再盖上被子很快就会出汗，而不盖被子又会很冷。</p>

<p>第二天早上异常清冷，泥土路上被轮胎压出的坑里积水已冻成了冰。路旁的树梢上挂着香炉，里面飘出浓重的烧羊粪的烟雾。这是一种习俗，据说这种呛人的烟雾能够熏跑蚊虫。阿妈给我们做早饭的时候给我们讲述了她的家庭情况。她有三个儿子，年龄和我们都差不多，都在外地打工。像是所有长年思念儿子的母亲一样，她说起他们时满脸的温情。说着说着她又给我们添上羊肉汤和油炸羊肉包：“多吃点，吃饱了，就不那么想家了。”</p>

<p>30年前卧轨自杀的海子在《七月不远》里以瑰丽的句子描述青海湖：因此青海湖不远/湖畔一捆捆蜂箱/使我显得凄凄迷人：/青草开满野花/青海湖上/我的孤独如天堂的马匹。</p>

<p>是在青藏公路旁边看到青海湖诗歌节的招牌。此时花期已过，湖边上的草丛开始变得枯黄，养蜂人沿路摆上小桌子，贩卖夏季的收获。我突然想起不久之前在去香山的路上看到的养蜂人，那是路旁的一片树林中，养蜂人和她那八九岁左右的女儿在林间嬉戏，阳光穿透树梢撒落在他们身上，旁边军绿色的帐篷和斑驳的蜂箱无声地讲述着这古老的行业。那一幕突然散发出一股难以表述的诗意，像是一幕盛开在水泥公路旁的田园风光。</p>

<p>我们在没有尽头的青藏线上骑着，左边是连绵不断的雪山，右边是湛蓝的湖面连接着一色的天空，车轮下是无限延伸的路。</p>

<p>这宝石的尸体，苍茫的水面。</p>

<p>我所期待的深入的交流一直没有出现，直到我们在夏河的青年旅舍里遇到许先生。</p>

<p>在夏河，我们六个人住进了一个八人间，于是认识了同屋的许先生。这是一个少见的中年旅行者，已经快六十岁的他看上去却像是一个刚满四十的风尘仆仆的中年人，清瘦而睿智。他在78年也就是恢复高考后的第二年考上大学，毕业后到国企工作了很长时间，像是他们那一代人共同的对命运的无奈却又不甘，他在快满不惑之年的时候仍然跳出了国企去了一家民企，尽管做了总经理，但眼看公司上市无望，想到自己还有很多事想做，于是干脆退体开始旅行。</p>

<p>“青藏线和川藏线这两条路线值得反复地走。”他说。他告诉我们他这几年不断旅行的经验，他带上书，一个人进入腾格尔沙漠，然后在荒无人烟的沙漠里思考、阅读。当天冷得不适合旅行时，他就带上一堆书去西双版纳慢慢读。他每年在家呆不了三个月，除了他儿子放假时陪陪他，其它时间都在路上。他那醉心于学术研究的妻子正好乐得清静，各得其乐。</p>

<p>“每个人都应该去追求真正的爱情，也应该去尝试暴富。也许你一辈子都追求不得。但是，人最重要的，是自我实现。当你满足了生存和发展之后，你就要考虑你的终极目标。”他是这样讲解他的生活态度，他说他也是这样讲给他儿子听的。由于没能暴富，他只能选择一种比较辛苦的旅行方式来认识这个世界。他讲起了他读大学的时候怎么突然跑去练起了气功，又是怎样走火入魔，然后又换了一个师父，后来又怎样因为恋爱结婚过起了世俗生活而荒废了练功。他的用词比较考究，有时候语速会变得很慢，仿佛这样才能保证他用的每一个词都能准确地表述他的意图。由于与同龄人相比的特立独行，有时候他的语气里又有一种掩饰不住的傲慢与自得。</p>

<p>第二天他与我们一同去往拉卜愣寺，这个出现在《天下无贼》里的寺庙香火旺盛，朝圣的信徒在寺庙门口俯身长拜。在更为发达的城市里，人们是通过经济关系关联起来的，房东与租户，卖家与买家，合作伙伴与竞争对手。而在这些经济相对比较弱的城市，由于人口流动率极低，宗教与氏族仍然占据着主要的统治地位。如果我们循着历史往前看，会发现经济成为主导力量的时代并不久远，商业成为一种能威胁到统治者地位的力量也不过是约四百年前的明朝末年，它还由于清朝的破坏而没能让中国顺利地进入资本社会。因此在这种偏远的地方，宗教的力量仍然是我们这些长年生活在大城市的人难以想像的。然而每次接近藏传佛教的时候，我总想起07年的暑假我给成都藏传佛教理事会做网站的不快经历，让我没有了进一步了解的欲望。</p>

<p>从青海湖回到西宁，不仅是从农村回到了城市，更像是从人烟稀少的野外回到了文明社会，这里有我们熟悉的王府井购物中心和车水马龙的宽阔街道。我们在一家没几个人会讲四川话的成都火锅店里吃了晚饭，隔壁桌坐着七八个中年人，看上去像是两三个关系很铁的朋友拉上他们的家人过来一起聚餐。他们大声嚷嚷，欢笑着劝酒，偶尔摔碎一个啤酒瓶。他们都是四十来岁的样子，经历过物质匮乏的七八十年代，突然面对着物质的极大丰富，开始尽情地消费，他们的脸由于长期的喝酒抽烟变得略显浮肿却又志得意满。他们这一代和我们这一代其实都面临着同样的命运，由于信仰的空白和价值观的破坏，只能拼命地积累物质财富，并为最终的结果得意或失意，却不得不面对精神上的贫瘠与浅薄。人是一个时间单位，我们所处的时代决定了我们的人生轨迹。这是我们共同的宿命。</p>

<p>此刻我突然想起在青年旅舍的留言墙上那个不知名的大学生写的：“再见，我的大学”。他写完这句话，然后和一起参加毕业旅行的同学道别，然后就像我们一样，纵身跳进社会的汇流中。</p>
]]></content>
  </entry>
  
</feed>
